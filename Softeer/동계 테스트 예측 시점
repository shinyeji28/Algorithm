/*
  N*M
  2번이상이 공기와 접촉되면 1시간만에 녹음
  얼음 내부에 있는 얼음은 외부 공기와 접촉하지 않음 - 8방 그룹
  격자 화면의 맨 가장자리는 얼음이 놈ㅎ이지 않는 것으로 가정

  입력>
  얼음 :1 / 공기 : 0
  출력>
  얼음이 모두 녹아 없어지는 데 걸리는 시간 (정수)

  구현> 
  8방으로 연결된 얼음은 하나의 그룹으로 간주
  외각의 얼음 중
  2변이 노출된 곳을 체크 - 시간 1
  
  1. 0,0에서 시작해 0에서1로 이동한 경우 1->2로 변경  - 외각 찾기
    1-1. BFS - 얼음에 닿이면 +1 -> if(얼음이 3이상이면 2면이 노출되었다는 것임으로 위치저장)
  2. 바꿔하 하는 위치만 저장 후 다른 함수에서 2->0으로 변경 - count 1시간으로 간주
  3. 1,2번을 반복
  
  
*/
import java.io.*;
import java.util.*;

public class Main {

    static int N,M;
    static int[][] map;
    static boolean[][] visited;
    static int[] dx = {0,0,1,-1};
    static int[] dy = {1,-1,0,0};
    static int hour;
    static List<Node> meltArr;
    static int meltCnt;
    static int[][] check;
  
  
    public static void main(String[] args) throws IOException {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
      StringTokenizer st = new StringTokenizer(br.readLine());
      N = Integer.parseInt(st.nextToken());
      M = Integer.parseInt(st.nextToken());

      map = new int[N][M];
      check = new int[N][M];
      visited = new boolean[N][M];
      hour = 0;
      for(int i=0;i<N;i++){
        st = new StringTokenizer(br.readLine());
        for(int j=0;j<M;j++){
          map[i][j] = Integer.parseInt(st.nextToken());
          if(map[i][j] == 1) meltCnt++;
        }
      }

      while(meltCnt > 0){
        meltArr = new ArrayList<>();
        visited = new boolean[N][M];
        check = new int[N][M];
        bfs();
        hour++;
        for(int i=0;i<meltArr.size();i++){
          Node cur = meltArr.get(i);
          map[cur.x][cur.y] = 0;
          if(--meltCnt==0)break;
        }
      }
      
      System.out.println(hour);

    }

    public static void bfs(){
      Queue<int[]> q = new ArrayDeque<>();
      q.offer(new int[]{0,0});
      visited[0][0] = true;
  
      while(!q.isEmpty()){
        int[] cur = q.poll();
        int x = cur[0], y = cur[1];
        for(int d=0;d<dx.length;d++){
          x = cur[0] + dx[d];
          y = cur[1] + dy[d];
          if(x<0 || y<0 || x>=N || y>=M || visited[x][y] || check[x][y] >= 2)continue;
          if(map[x][y] == 1){
            check[x][y]++;
            if(check[x][y]==2){
              meltArr.add(new Node(x,y));
            }
            continue;
          }
          q.offer(new int[]{x,y});
          visited[x][y] = true;
        }
      }  
    }
    public static void print(){
      for(int i=0;i<N;i++){
        for(int j=0;j<M;j++){
          System.out.print(map[i][j]+" ");
        }
        System.out.println();
      }
      System.out.println("---------------");
    }
   public static void printVisited(){
      for(int i=0;i<N;i++){
        for(int j=0;j<M;j++){
          System.out.print(visited[i][j]+" ");
        }
        System.out.println();
      }
      System.out.println("---------------");
    }
    public static class Node{
      int x;
      int y;
      public Node(int x, int y){
        this.x = x;
        this.y = y;
      }
    }
}
