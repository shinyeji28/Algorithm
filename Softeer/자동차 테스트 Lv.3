/*
    sorting 오름차순
    q를 기준으로 n을 binarySearch로 탐색
    q가 n에 존재하지 않으면 0
    q가 n에 존재하면 n의 위치에서 (0~n의 위치 -1 x n의 위치 +1~n사이즈) 만들 수 있는 경우의 수 저장
               
*/
import java.io.*;
import java.util.*;

public class Main {
    static final int PICKSIZE = 3;
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuffer sb = new StringBuffer();
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int q = Integer.parseInt(st.nextToken());
        long[] expect = new long[q];
        long[] array = new long[n];
        st = new StringTokenizer(br.readLine());
        for(int i=0;i<n;i++){
            array[i] = Long.parseLong(st.nextToken());
        }
        for(int i=0;i<q;i++){
            st = new StringTokenizer(br.readLine());
            expect[i] = Long.parseLong(st.nextToken());
        }
        Arrays.sort(array);

        for(int i=0;i<q;i++){
            int idx = binarySearch(array, expect[i]);
            if(idx<0)sb.append(0).append('\n');
            else sb.append(idx * (n-(idx+1))).append('\n');
        }
        
        System.out.println(sb);
    }
    public static int binarySearch(long[] array, long findIdx){
        int left = 0;
        int right = array.length-1;
        while(left <= right){
            int pivot = (left + right) /2;
            if(findIdx == array[pivot]){
                return pivot;
            }
            if(findIdx < array[pivot]){
                right = pivot-1;
            }else if (array[pivot] < findIdx){
                left = pivot+1;
            }
        }
        return -1;
    }
    
}
