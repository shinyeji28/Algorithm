/*
1. queue[]로 D,C,B,A 구역의 차량 정보를 저장
2. 현재 car time < 오른쪽 car time -> 현재 car가 교차로를 지날 갈 수 있음
3-1. 현재 car가 교차로를 지나 갈 수 있다면 pick list에 넣고 q.poll, result에 시간 기록
4. t가 10^9임으로 t를 1씩 증가하면 시간초과 발생할 것임 -> t를 최소 시간으로 점프해야 함
     curTime > 모든 car의 t -> 점프  = pick할게 없다 -> 점프
5. 교착 상태면 즉시 종료
*/

import java.util.*;
import java.io.*;

public class Main{
    public static class Node{
        int t, idx;
        public Node(int t, int idx){
            this.t = t;
            this.idx = idx;
        }
    }
    public static void main(String[] agrs) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        Queue<Node>[] qList = new Queue[4];  // D,C,B,A
        int[] result = new int[n];
        Arrays.fill(result,-1);
        for(int i=0;i<4;i++){
            qList[i] = new ArrayDeque<>();
        }

        for(int i=0;i<n;i++){

            StringTokenizer st = new StringTokenizer(br.readLine());
            int t = Integer.parseInt(st.nextToken());
            char w = st.nextToken().charAt(0);
            int idx = 4 - ((int)w - (int)'A') % 4 -1 ;
            qList[idx].offer(new Node(t,i));
        }

        int curTime = 0;
        int emptyCnt = 0;
        boolean[] emptyCheck = new boolean[4];
        Queue<Integer> willPick = new ArrayDeque<>();
        A: while(emptyCnt<4) {
            int deadlock = 4;
            int minTime = Integer.MAX_VALUE;

            for (int i = 0; i < 4; i++) {
                if (qList[i].isEmpty()) {
                    if(!emptyCheck[i]){
                        emptyCnt++;
                        emptyCheck[i] = true;
                    }
                    continue;
                }
                int curCar = qList[i].peek().t;
                minTime = Math.min(minTime, curCar);

                if (curCar > curTime) {
                    continue;
                }

                int nextIdx = (i + 1) % 4;
                if (qList[nextIdx].isEmpty() || qList[nextIdx].peek().t > curTime) {
                    willPick.offer(i);
                }else if(qList[nextIdx].peek().t <= curTime){
                    deadlock--;
                }
                if(deadlock==0)break A;

            }
            // pick
            boolean processed = false;
            while(!willPick.isEmpty()){
                int idx = willPick.poll();
                Node car = qList[idx].poll();
                result[car.idx] = curTime;
                processed = true;
            }
            if(!processed){
                curTime = minTime;
            }else curTime++;
        }
        for(int i=0;i<result.length;i++){
            System.out.println(result[i]);
        }
    }
}
