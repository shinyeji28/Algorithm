/*
    유령 2마리 : 남우로 최단거리로 움직이기 (벽도 통과, 움직이지 않아도 됨)
    남우 : 출구로 최단거리가 아니여도 유령피해서 출구까지 움직이기 (벽 X)
    출구에 도달 못하면 종료, 유령 다이면 종료

    구현 >
    완탐
    1) 남우 입장
    여러 경우를 다 가보기 (BFS)
        유령을 만나면 되돌아감 (return)
        출구 도착 시 (yes) / 그 외 (no)

        next가 벽이거나 유령이거나 범위를 벗어나면 다른 방향으로 가기
    2) 유령 입장
        남우를 에게 갈 수 있는 최단거리를 가기
        next가 유령이거나 범위를 벗어나면 다른 방향으로 가기

    구현 순서>
        1. map에서 유령의 최단거리를 모두 기록, 두 유령이 갈 수 있는 최단거리 중 작은 것을 저장 (BFS)
        2. 남우의 BFS depth가 유령의 최단거리보다 클 때거나 벽이 아니거나 map범위가 아닐 때만 이동 가능
            방문 중복 가능

    회고 : 남우가 움직이는 것을 DFS로 했는데 틀렸고, 같은 로직으로 BFS로 했더니 성공했다.
           DFS는 가능한 모든 경로를 탐색하기 때문에 시간초가 발생이 크다, 최단 경로는 BFS로 하자
*/

import java.io.*;
import java.util.*;

public class Main {
    static int n,m;
    static char[][] map;
    static int[] dx = new int[]{0,0,1,-1};
    static int[] dy = new int[]{1,-1,0,0};
    static int[][] distance;
    static Queue<int[]> q = new ArrayDeque<>();
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        map = new char[n][m];
        distance = new int[n][m];
        int[] namwoo = new int[2];
        for(int i=0;i<n;i++){
            st = new StringTokenizer(br.readLine());
            String str = st.nextToken();
            for(int j=0;j<m;j++){
                map[i][j] = str.charAt(j);
                if(map[i][j]=='G'){
                    q.offer(new int[]{i,j});
                    distance[i][j] = 0;
                    continue;
                }else if(map[i][j] =='N'){
                    namwoo[0] = i;
                    namwoo[1] = j;
                }
                distance[i][j] = Integer.MAX_VALUE;
            }
        }

        recordGhost();
        if(movingNamwoo(namwoo[0], namwoo[1])){
            System.out.println("Yes");
        }else{
            System.out.println("No");
        }
    }
    public static boolean movingNamwoo(int x, int y){
        Queue<int[]> q = new ArrayDeque<>();
        boolean[][] visited = new boolean[n][m];
        q.offer(new int[]{x,y,0});
        visited[x][y] = true;
        while(!q.isEmpty()){
            int[] pos = q.poll();
            int cx = pos[0];
            int cy = pos[1];
            int depth = pos[2];
            if(map[cx][cy]=='D') return true;
            for(int d=0;d<dx.length;d++){
                int nx = cx + dx[d];
                int ny = cy + dy[d];
                if(nx<0|| ny<0|| nx>=n||ny>=m || visited[nx][ny] || map[nx][ny] =='#' || distance[nx][ny] <= depth+1)continue;
                q.offer(new int[]{nx, ny, depth+1});
                visited[nx][ny] = true;
            }
        }
        return false;
 
    }


    public static void recordGhost(){
        while(!q.isEmpty()){
            int[] pos = q.poll();
            int x = pos[0];
            int y = pos[1];
            int dist = distance[x][y];
            for(int d=0;d<dx.length;d++){
                int nx = x + dx[d];
                int ny = y + dy[d];
                if(nx<0|| ny<0|| nx>=n||ny>=m)continue;
                if(distance[nx][ny] > dist +1){
                    distance[nx][ny] = dist +1;
                    q.offer(new int[]{nx, ny});
                }
            }
        }
    }
}
