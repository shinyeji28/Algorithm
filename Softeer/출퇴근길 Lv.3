/* 
    특정 노드에서 집과 회사를 모두 갈 수 있으면 출퇴근이 겹치는 노드이다.
    특정 노드에서부터 완탐을 하면 시간이 오래걸림(시작 노드가 n-2개 있기 때문)
    start ->  특정 노드 -> end 로 가는 것을 확인 하려면, 
    <start -> 특정 노드 도달 여부 && reverse end -> 특정 노드 도달 여부>를 확인하면 됨
    왕복으로 총 4번 DFS를 하면 된다.
*/
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        
        List<Integer>[] graph = new ArrayList[n+1];
        List<Integer>[] reverseGraph = new ArrayList[n+1];

        for(int i=1;i<=n;i++){
            graph[i] = new ArrayList<>();
            reverseGraph[i] = new ArrayList<>();
        }
        for(int i=0;i<m;i++){
            st = new StringTokenizer(br.readLine());
            int from = Integer.parseInt(st.nextToken());
            int to = Integer.parseInt(st.nextToken());
            graph[from].add(to);
            reverseGraph[to].add(from);
        }
        st = new StringTokenizer(br.readLine());
        int start = Integer.parseInt(st.nextToken());
        int end = Integer.parseInt(st.nextToken());
            
        boolean[] visited1 = new boolean[n+1];
        visited1[end] = true;
        dfs(start, visited1, graph);
        
        boolean[] visited2 = new boolean[n+1];
        dfs(start, visited2, reverseGraph);
        
        boolean[] visited3 = new boolean[n+1];
        visited3[start] = true;
        dfs(end, visited3, graph);
        
        boolean[] visited4 = new boolean[n+1];
        dfs(end, visited4, reverseGraph);

        int result = 0;
        for(int i=1;i<=n;i++){
            if(visited1[i] && visited2[i] && visited3[i] && visited4[i]){
                result++;
            }
        }
        System.out.println(result - 2);
    }
    public static void dfs(int from, boolean[] visited, List<Integer>[] graph){
        if(visited[from])return;
        
        visited[from] = true;
        
        for(Integer node : graph[from]){
            dfs(node, visited, graph);
        }
    }
}
