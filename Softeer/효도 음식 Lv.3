/*
    새롭게 알게된 카데인 알고리즘
    카데인 알고리즘(연속된 배열에서 부분 배열의 최대 합을 효율적으로 구함) + 누적합
    왼쪽 요리의 부분 집합의 최대 값과 오른쪽 요리의 부분 집합의 초대 값을 각각 구해 
    두 개의 최대 값을 구한다.
*/
import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        int[] arr = new int[n];
        int[] maxLeft = new int[n];
        int[] maxRight = new int[n];

        StringTokenizer st = new StringTokenizer(br.readLine());

        for(int i=0;i<n;i++){
            arr[i] = Integer.parseInt(st.nextToken());
        }

        int curMax = arr[0];
        maxLeft[0] = arr[0];
        for(int i=1;i<n-2;i++){
            curMax = Math.max(arr[i], curMax + arr[i]); 
            maxLeft[i] = Math.max(maxLeft[i-1], curMax);
        }
        curMax = arr[n-1];
        maxRight[n-1] = arr[n-1];
        for(int i=n-2;i>1;i--){
            curMax = Math.max(arr[i], curMax + arr[i]); 
            maxRight[i] = Math.max(maxRight[i+1], curMax);
        }
        int result = Integer.MIN_VALUE;
        for(int i=0;i<n-2;i++){
            result = Math.max(result, maxLeft[i] + maxRight[i+2]);
        }
        System.out.println(result);
    }
}
