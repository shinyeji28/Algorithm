import java.io.*;
import java.util.*;

public class Main {

    public static class Node{
        int x, y;
        public Node(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    static int r,c;
    static int[][] rainTime;
    static char[][] map; 
    static int[] dx = new int[]{0,0,1,-1};
    static int[] dy = new int[]{1,-1,0,0};
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        r = Integer.parseInt(st.nextToken());
        c = Integer.parseInt(st.nextToken());
        map = new char[r][c];
        rainTime = new int[r][c];
        Node washCar = new Node(0,0);
        Queue<Node> rainSpot = new ArrayDeque<>();
        for(int i=0;i<r;i++){
            st = new StringTokenizer(br.readLine());
            String str = st.nextToken();
            for(int j=0;j<c;j++){
                map[i][j] = str.charAt(j);
                if(map[i][j] == 'W') {
                    washCar.x = i;
                    washCar.y = j;
                }
                if(map[i][j] == '*') rainSpot.add(new Node(i,j));
                rainTime[i][j] = Integer.MAX_VALUE;
            }
        }
        
        while(!rainSpot.isEmpty()){
            Node node = rainSpot.poll();
            rainTime[node.x][node.y] = 0;
            rainBfs(node.x, node.y);
        }

        int result = dfs(washCar.x, washCar.y);
        System.out.println(result==0? "FAIL" : result);
        
    }
    public static void rainBfs(int cx, int cy){

        Queue<Node> q = new ArrayDeque<>();
        boolean[][] visited = new boolean[r][c];
        q.offer(new Node(cx,cy));
        visited[cx][cy] = true;

        while(!q.isEmpty()){
            Node node = q.poll();
            int x = node.x;
            int y = node.y;
            for(int d=0;d<dx.length;d++){
                int nx = x + dx[d];
                int ny = y + dy[d];
                if(nx<0||ny<0||nx>=r||ny>=c || visited[nx][ny] || map[nx][ny] == 'X'||map[nx][ny] == 'H')continue;
                if(rainTime[nx][ny] > rainTime[x][y]+1){
                    rainTime[nx][ny] = rainTime[x][y]+1;
                    q.offer(new Node(nx, ny));
                    visited[nx][ny] = true;
                }
            }
        }
    }
    public static int dfs(int cx, int cy){

        Queue<Node> q = new ArrayDeque<>();
        boolean[][] visited = new boolean[r][c];
        int[][] distance = new int[r][c];

        q.offer(new Node(cx,cy));
        visited[cx][cy] = true;

        while(!q.isEmpty()){
            Node node = q.poll();
            int x = node.x;
            int y = node.y;
            if(map[x][y] == 'H'){
                return distance[x][y];
            }
            for(int d=0;d<dx.length;d++){
                int nx = x + dx[d];
                int ny = y + dy[d];
                if(nx<0||ny<0||nx>=r||ny>=c || visited[nx][ny] || map[nx][ny] == 'X')continue;
                if(rainTime[nx][ny] > distance[x][y] +1){
                    distance[nx][ny] = distance[x][y] +1;
                    q.offer(new Node(nx, ny));
                    visited[nx][ny] = true;
                }
            }
        }
        return 0;
    }
}
