import java.io.*;
import java.util.*;

public class Main {
    static int[][] map;
    static int result,n;
    static PriorityQueue<Node> pq = new PriorityQueue<>();
    static Node[] sorting; 
    static boolean[][] visited;
    static int[] dx = new int[]{0,0,1,-1};
    static int[] dy = new int[]{1,-1,0,0};
    static public class Node implements Comparable<Node>{
        int x, y, v;
        public Node(int x,int y, int v){
            this.x = x;
            this.y = y;
            this.v = v;
        }
        @Override
        public int compareTo(Node node){
            return Integer.compare(this.v, node.v);
        }
    }
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        n = Integer.parseInt(br.readLine());
        map = new int[n][n];
        sorting = new Node[n*n];
        visited = new boolean[n][n];
        for(int i=0;i<n;i++){
            StringTokenizer st = new StringTokenizer(br.readLine());
            for(int j=0;j<n;j++){
                map[i][j] = Integer.parseInt(st.nextToken());
                pq.add(new Node(i, j, map[i][j]));   
            }
        }
        int i=0;
        while(!pq.isEmpty()){
            Node node = pq.poll();
            sorting[i++] = node;
        }
        if(n <= 2){
           for(i=0;i<n;i++){
                result +=sorting[i].v;
            } 
        }
        else if(n == 3){
            for(i=0;i<n-1;i++){
                result +=sorting[i].v;
            }
        }
        else if(n == 4)dfs(sorting[0].x, sorting[0].y, 0, sorting[0].v);
        System.out.println(result);
    }
    public static void dfs(int x, int y, int depth, int sum){
        if(visited[x][y])return;
        visited[x][y] = true;
        if(depth == 8){
            result = sum;
        }
        for(int d=0;d<dx.length;d++){
            int nx = x + dx[d];
            int ny = y + dy[d];
            if(nx<0 || ny <0 || nx>=n || ny>=n)continue;
            dfs(nx,ny, depth+1, sum + map[nx][ny]);
        }
        visited[x][y] = false;
            
    }
}
