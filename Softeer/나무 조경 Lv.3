import java.io.*;
import java.util.*;

public class Main {
    static int[][] map;
    static int n;
    static boolean[][] visited;
    static int[] dx = new int[]{0, 0, 1, -1};
    static int[] dy = new int[]{1, -1, 0, 0};
    static int maxBeauty = 0;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        n = Integer.parseInt(br.readLine());
        map = new int[n][n];
        visited = new boolean[n][n];
        
        for (int i = 0; i < n; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            for (int j = 0; j < n; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        findMaxBeauty(0, 0, 0, 0);
        System.out.println(maxBeauty);
    }

    public static void findMaxBeauty(int x, int y, int depth, int currentBeauty) {
        if (depth == 4) {
            maxBeauty = Math.max(maxBeauty, currentBeauty);
            return;
        }

        for (int i = x; i < n; i++) {
            for (int j = (i == x ? y : 0); j < n; j++) {
                if (!visited[i][j]) {
                    for (int d = 0; d < 4; d++) {
                        int nx = i + dx[d];
                        int ny = j + dy[d];
                        if (nx >= 0 && ny >= 0 && nx < n && ny < n && !visited[nx][ny]) {
                            visited[i][j] = visited[nx][ny] = true;
                            findMaxBeauty(i, j, depth + 1, currentBeauty + map[i][j] + map[nx][ny]);
                            visited[i][j] = visited[nx][ny] = false;
                        }
                    }
                }
            }
        }

        maxBeauty = Math.max(maxBeauty, currentBeauty); 
    }
}
