/* 
    조합) 4개까지 뽑으면서 합 비교
        하나뽑을 때 동시에 상하좌우 중 하나를 더함*/
import java.io.*;
import java.util.*;

public class Main {
    static int[][] map;
    static int n;
    static boolean[][] visited;
    static int[] dx = new int[]{0, 0, 1, -1};
    static int[] dy = new int[]{1, -1, 0, 0};
    static int result = 0;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        n = Integer.parseInt(br.readLine());
        map = new int[n][n];
        visited = new boolean[n][n];
        
        for (int i = 0; i < n; i++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
            for (int j = 0; j < n; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        findMaxBeauty(0, 0,0);
        System.out.println(result);
    }
    public static void findMaxBeauty( int depth, int sum, int start){
        result = Math.max(result, sum);
        if(depth == 4){
            return;
        }

        for(int i=start;i<n*n;i++){
            int cx = i/n;
            int cy = i%n;
            int tempSum = sum + map[cx][cy];
            if(visited[cx][cy])continue;
            visited[cx][cy] = true;
            for(int d=0;d<dx.length;d++){
                int nx = cx + dx[d];
                int ny = cy + dy[d];
                if(nx<0 || ny<0 || nx>=n || ny>=n || visited[nx][ny])continue;
                visited[nx][ny] = true;
                findMaxBeauty( depth+1,tempSum + map[nx][ny], i+1);
                visited[nx][ny] = false;
            }
            visited[cx][cy] = false;
        }
    }
}
