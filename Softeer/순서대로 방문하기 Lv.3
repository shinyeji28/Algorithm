/*
    완탐
    dfs 방법
    1) 방문해야 할 곳을 차례로 방문하면서 방문했으면 idx ++
*/
import java.io.*;
import java.util.*;

public class Main {
    static int[][] map;
    static int[][] haveTo;
    static int result;
    static boolean visited[][];
    static int n;
    static int[] dx =new int[]{0,0,-1,1};
    static int[] dy =new int[]{-1,1,0,0};
    public static void main(String[] args) throws IOException{

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        map = new int[n][n];
        visited = new boolean[n][n];
        haveTo = new int[m][2];
        for(int i=0;i<n;i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0;j<n;j++){
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }
        for(int i=0;i<m;i++){
            st = new StringTokenizer(br.readLine());
            haveTo[i][0] = Integer.parseInt(st.nextToken())-1;
            haveTo[i][1] = Integer.parseInt(st.nextToken())-1;
        }

        dfs(haveTo[0][0], haveTo[0][1], 0);
        System.out.println(result);
    }
    public static void dfs(int x, int y, int haveToIdx){
        
        if(x<0|| y<0 || x>=n || y>=n|| visited[x][y] || map[x][y] ==1)return;
        visited[x][y] = true;
        
        int tempHaveTo = haveToIdx;
        if(haveTo[tempHaveTo][0] ==x && haveTo[tempHaveTo][1] ==y){
            tempHaveTo = haveToIdx + 1;
            if(tempHaveTo >= haveTo.length){
                result++;
                visited[x][y] = false;
                return;
            }
        }
        
        for(int d = 0; d<dx.length; d++){
            int nx = x + dx[d];
            int ny = y + dy[d];
            dfs(nx, ny, tempHaveTo);
        }
        visited[x][y] = false;

    }
}
