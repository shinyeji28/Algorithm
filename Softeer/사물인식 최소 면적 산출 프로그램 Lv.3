/*
  평면 N개의 점
  각 점은 k개의 색깔 중 하나 (적어도 하나씩 색깔이 포함)
  각 점을 포함한 사물은 반드시 직사각형으로 인식 (경계 포함)
  선분, 점 또한 직사각형으로 간주 (넓이 0)
  하나의 좌표에 여러개 점 가능
  직사각형은 수평,수직만 가능

  출력>
  K개의 색을 가진 점을 적어도 하나씩 포함하는 사물 중 넓이가 가장 작은 것의 넓이 구하라 (정수)

  입력>
  N K
  x y k

  구현>
  1. 모든 색을 포함한 조합 구하기
    - 색깔별로 그룹짓기 - 2차원 배열
    - 재귀 돌려 색깔별로 하나씩 선택하기
        - 백트래킹 : 이미 넓이를 구한 것보다 크다면 return
  2. 조합 마다 직사각형 넓이 구하기
  3. 가장 작은 직사각형 넓이 출력
  
*/

import java.io.*;
import java.util.*;

public class Main {

    static List<Node>[] pos;
    static Node[] pick;
    static int minArea = Integer.MAX_VALUE;
  
    public static void main(String[] args) throws IOException {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
      StringTokenizer st = new StringTokenizer(br.readLine());
      int N = Integer.parseInt(st.nextToken());
      int K = Integer.parseInt(st.nextToken());

      pick = new Node[K];
      
      pos = new ArrayList[K+1];
      for(int i=1;i<=K;i++){
        pos[i] = new ArrayList<Node>();
      }
      for(int i=0;i<N;i++){
        st = new StringTokenizer(br.readLine());
        int x = Integer.parseInt(st.nextToken());
        int y = Integer.parseInt(st.nextToken());
        int c = Integer.parseInt(st.nextToken());
        pos[c].add(new Node(x,y));
      }


     int[] rect = new int[]{Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE, Integer.MIN_VALUE };  // minx, maxx, miny, maxy
      dfs(1,0, rect);
      System.out.println(minArea);
    }

    public static void dfs(int cIdx, int depth, int[] rect){
      int area = calcArea(rect);
      if(area >= minArea) return;

      if(depth == pick.length){
        minArea = Math.min(area, minArea);
        return;
      }
      
      for(Node n : pos[cIdx]){
        pick[depth] = n;
        int[] newRect = calcRetangle(rect, n);
        dfs(cIdx + 1, depth + 1, newRect);
      }
    }

    public static int calcArea(int[] rect){
      return (rect[1] - rect[0]) * (rect[3] - rect[2]);
    }
    public static int[] calcRetangle(int[] rect, Node n){
      int nx = n.x;
      int ny = n.y;
      int[] newRect = new int[]{rect[0],rect[1],rect[2],rect[3]};
      if(nx < newRect[0]) newRect[0] = nx;
      if(nx > newRect[1]) newRect[1] = nx;
      if(ny < newRect[2]) newRect[2] = ny;
      if(ny > newRect[3]) newRect[3] = ny;
      return newRect;
    }
    public static class Node{
      int x;
      int y;
      public Node(int x, int y){
        this.x = x;
        this.y = y;
      }
    }
}
