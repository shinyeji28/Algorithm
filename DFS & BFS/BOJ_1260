package beakJoon;

import java.io.*;
import java.lang.reflect.Array;
import java.util.*;

/**
* 입력
4 5 2
1 2
1 3
1 4
2 4
3 4
 * @author SSAFY
 *
 */
public class BOJ_1260 {

    static int[][] arr;
    static int[] visited;
    static List<Integer> result = new ArrayList<>();
    public static void main(String[] args) throws Exception{

//	        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
//	        String[] input = br.readLine().split(" ");
//	        int N = Integer.parseInt(input[0]);
//	        int M = Integer.parseInt(input[1]);
//	        int V = Integer.parseInt(input[2]);
//	        Map<String,List<String>> map = new HashMap<String,List<String>>();
//	        
//	        for(int i=0;i<M;i++) {
//	            String[] str= br.readLine().split(" ");
//	            if(!map.containsKey(str[0])) {
//	                List<String> list = new ArrayList<>();
//	                list.add(str[1]);
//	                map.put(str[0], list);
//	            }else {
//	                map.get(str[0]).add(str[1]);
//	            }
//	        }
//	        for(int i=1;i<=M;i++) {
//	            if(map.containsKey(Integer.toString(i)))System.out.println(map.get(Integer.toString(i)));
//	        }
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = br.readLine().split(" ");
        int N = Integer.parseInt(input[0]);
        int M = Integer.parseInt(input[1]);
        int V = Integer.parseInt(input[2]);
        arr = new int[N+1][N+1];
        visited = new int[N+1];
        for(int i=0;i<M;i++) {
            input = br.readLine().split(" ");
            arr[Integer.parseInt(input[0])][Integer.parseInt(input[1])] = 1;
            arr[Integer.parseInt(input[1])][Integer.parseInt(input[0])] = 1;


        }
        dfs(V);
        print();
		result.clear();
        visited = new int[N+1];
        
	    bfs(V);
	    print();
        
    }
    private static void dfs(int v) {
    	if(arr.length==result.size()) {
    		return;
    	}
    	result.add(v);
		visited[v]=1;
        for(int i=0;i<arr[0].length;i++) {
        	if(arr[v][i]==1 && visited[i]==0) {
                dfs(i);
        	}
        }
    }
    private static void bfs(int v) {
    	Deque<Integer> dq = new ArrayDeque<>();
    	dq.add(v);
    	visited[v]=1;
    	while(dq.size()!=0){
    		int node = dq.pollFirst();
    		result.add(node);
    		
    		for(int i=0;i<arr[0].length;i++) {
    			if(arr[node][i]==1 && visited[i]==0) {
    				dq.add(i);
    	    		visited[i]=1;
    			}
    		}
    	}
    }
    private static void print() {
    	for(int i=0;i<result.size();i++) {
    		System.out.print(result.get(i)+" ");
    	}
    	System.out.println();
    }

}

